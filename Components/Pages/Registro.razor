@page "/registro"
@inject NavigationManager NavigationManager
@inject AppDbContext DbContext
@using DiarioVideojuegos.Data
@using DiarioVideojuegos.Models
@using Microsoft.EntityFrameworkCore

<h3>Registro de Usuario</h3>
<EditForm Model="registerModel" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="username">Usuario</label>
        <InputText id="username" @bind-Value="registerModel.Username" />
    </div>

    <div>
        <label for="email">Correo</label>
        <InputText id="email" type="email" @bind-Value="registerModel.Email" />
    </div>

    <div>
        <label for="password">Contraseña</label>
        <InputText id="password" type="password" @bind-Value="registerModel.Password" />
    </div>

    <button type="submit">Registrarse</button>
</EditForm>

@if (!string.IsNullOrEmpty(mensajeError))
{
    <p style="color: red;">@mensajeError</p>
}

@code {
    private RegisterModel registerModel = new();
    private string mensajeError = string.Empty;

    private async Task HandleRegister()
    {
        bool usuarioExiste = await DbContext.Usuarios.AnyAsync(u =>
            u.Username == registerModel.Username || u.Email == registerModel.Email);

        if (usuarioExiste)
        {
            mensajeError = "El usuario o correo ya están registrados.";
            return;
        }

        var nuevoUsuario = new Usuario
        {
            Username = registerModel.Username,
            Email = registerModel.Email,
            Password = registerModel.Password
        };

        DbContext.Usuarios.Add(nuevoUsuario);
        await DbContext.SaveChangesAsync();

        NavigationManager.NavigateTo("/login");
    }

    private class RegisterModel
    {
        public string Username { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
}